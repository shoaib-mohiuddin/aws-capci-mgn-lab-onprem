name: Capci Migration Lab CI/CD Pipeline for on-premises virtual infra simulation

on: 
  push:
    branches:
      - main
  pull_request:

jobs:
  tflint:
    name: tflint
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: onprem-infra
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache plugin dir
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}
        
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3

      - name: Init TFLint
        run: tflint --init
        # env:
        #   # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        #   GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint  -f compact

  checkov:
    name: Checkov
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: onprem-infra
          framework: terraform 
          download_external_modules: true
          # soft_fail: true
          skip_check: CKV_AWS_356,CKV_AWS_111,CKV2_AWS_12,CKV2_AWS_19,CKV2_AWS_11

  infracost:
    name: Infracost
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # Required to post comments
      pull-requests: write

    env:
      TF_ROOT: onprem-infra

    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v3

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=${TF_ROOT} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{github.token}} \
                                     --pull-request=${{github.event.pull_request.number}} \
                                     --behavior=update

  terraform-deploy:
    name: Terraform deploy
    # if: (github.event_name == 'pull_request') || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      packages: write
      contents: read
      id-token: write
    strategy:
      matrix: 
        working-directory: 
          - onprem-infra
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.working-directory }}
    env:
      ROLE_TO_ASSUME: "${{ secrets.AWS_IAM_ROLE_ARN }}"
      AWS_REGION: "${{ secrets.AWS_REGION }}"
      SESSION_NAME: "GithubAuthSession"
      
    steps:
      - name: Clone our repository
        uses: actions/checkout@v3

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ${{ env.SESSION_NAME }}

      - name: Terraform Set up
        uses: hashicorp/setup-terraform@v2

      - name: Terraform format
        run: terraform fmt

      - name: Terraform initialization
        run: terraform init

      - name: Terraform Validate
        run: terraform validate 

      - name: Terraform planning
        # run:  TF_LOG=TRACE terraform plan
        run: terraform plan 
        continue-on-error: true

      - name: Terraform plan comment on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform applying
        if: github.event_name != 'pull_request'
        run: terraform apply -auto-approve
